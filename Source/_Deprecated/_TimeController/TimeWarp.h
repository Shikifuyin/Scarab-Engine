/////////////////////////////////////////////////////////////////////////////////
// File : Engine/Physics/TimeController/TimeWarp.h
/////////////////////////////////////////////////////////////////////////////////
// Version : 1.0a
// Began Code : 29/05/2010
// Status : Alpha
// Portability : Any
/////////////////////////////////////////////////////////////////////////////////
// Description : The TimeWarp algorithm applied to parallel simulation ...
/////////////////////////////////////////////////////////////////////////////////
// Part of Scarab-Engine, licensed under the
// Creative Commons Attribution-Noncommercial-NoDerivs 3.0 Unported License
//   http://creativecommons.org/licenses/by-nc-nd/3.0/
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Known Bugs : None
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Header prelude
#ifndef KOALA_ENGINE_PHYSICS_TIMECONTROLLER_TIMEWARP_H
#define KOALA_ENGINE_PHYSICS_TIMECONTROLLER_TIMEWARP_H

/////////////////////////////////////////////////////////////////////////////////
// Includes
#include "../../../Lib/Core/Datastruct/Array/RingBuffer.h"

#include "TimeWarpMessage.h"

/////////////////////////////////////////////////////////////////////////////////
// Constants definitions

/////////////////////////////////////////////////////////////////////////////////
// The TimeWarpController class
class TimeWarpController //: public TimeController
{
public:
    TimeWarpController();
    virtual ~TimeWarpController();

    // Getters

    // Simulation loop
    Void Simulate( Scalar fTime )
    {
        //TimeWarpEvent firstEvent = m_pGlobalEventQueue->Shift();
        //for( UInt i = 0; i < firstEvent.pTargetProcesses->Count(); ++i ) {
        //    (*firstEvent.pTargetProcesses)[i]->Simulate( fTime );
        //}
        //_ProcessEvent( firstEvent );
        //_RescheduleEvents();
    }

private:
    Scalar m_fGlobalTime;

    RingBuffer<TimeWarpMessage> m_bufGlobalMessageQueue;
};


/////////////////////////////////////////////////////////////////////////////////
// Backward Includes (Inlines & Templates)
#include "TimeWarp.inl"

/////////////////////////////////////////////////////////////////////////////////
// Header end
#endif // KOALA_ENGINE_PHYSICS_TIMECONTROLLER_TIMEWARP_H

