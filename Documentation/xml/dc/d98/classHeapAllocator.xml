<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="dc/d98/classHeapAllocator" kind="class" prot="public">
    <compoundname>HeapAllocator</compoundname>
    <basecompoundref refid="d0/de0/classMemoryAllocator" prot="public" virt="non-virtual">MemoryAllocator</basecompoundref>
    <includes refid="d3/d89/HeapAllocator_8h" local="no">HeapAllocator.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1aca99064a1b5d4f94dc2ee13471fa23fd" prot="private" static="no" mutable="no">
        <type>const <ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>const UInt AlignUnit</definition>
        <argsstring></argsstring>
        <name>AlignUnit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="134" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1a5c10248f3f7d9fa562df67b4f64fb874" prot="private" static="no" mutable="no">
        <type>const <ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>const UInt AlignUnitShift</definition>
        <argsstring></argsstring>
        <name>AlignUnitShift</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="135" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1ae9b7af9168de7eeb81ece58754f3c029" prot="private" static="no" mutable="no">
        <type>const <ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>const UInt AUFreeMask</definition>
        <argsstring></argsstring>
        <name>AUFreeMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="136" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1aef8b996e0b6ec8c35ffe4358d0f0d9ef" prot="private" static="no" mutable="no">
        <type>const <ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>const UInt AUSizeMask</definition>
        <argsstring></argsstring>
        <name>AUSizeMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="137" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1ad87f66611d54e90676fcedca61ccc92d" prot="private" static="no" mutable="no">
        <type>const <ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>const UInt ChunkHeadAUSize</definition>
        <argsstring></argsstring>
        <name>ChunkHeadAUSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="138" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1a961987d20bb79c3ea47162aa92da15c1" prot="private" static="no" mutable="no">
        <type>const <ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>const UInt ChunkHeapNodeAUSize</definition>
        <argsstring></argsstring>
        <name>ChunkHeapNodeAUSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="139" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1aa308d624fcb8588580b5406d732ec936" prot="private" static="no" mutable="no">
        <type>const <ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>const UInt ChunkListNodeAUSize</definition>
        <argsstring></argsstring>
        <name>ChunkListNodeAUSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="140" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1a4b16f0409abc2f7beaa5d2e1881fcb44" prot="private" static="no" mutable="no">
        <type>const <ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>const UInt DummyChunkAUSize</definition>
        <argsstring></argsstring>
        <name>DummyChunkAUSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="141" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1afb4f0699a7629636dab4b0c4f1b99556" prot="private" static="no" mutable="no">
        <type>const <ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>const UInt DummyChunkByteSize</definition>
        <argsstring></argsstring>
        <name>DummyChunkByteSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="142" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1af2939b38be44a3a6b02455b4a06e939c" prot="private" static="no" mutable="no">
        <type>const <ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>const UInt MinimalChunkAUSize</definition>
        <argsstring></argsstring>
        <name>MinimalChunkAUSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="143" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1a6e836e02e8227cc451a305253d12a42b" prot="private" static="no" mutable="no">
        <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
        <definition>ChunkHead* m_pLastFreed</definition>
        <argsstring></argsstring>
        <name>m_pLastFreed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="172" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1a74756c8e14d5874a227661263a082a0e" prot="private" static="no" mutable="no">
        <type><ref refid="d6/d0e/structChunkHeapNode" kindref="compound">ChunkHeapNode</ref> *</type>
        <definition>ChunkHeapNode* m_pBinHeapRoot</definition>
        <argsstring></argsstring>
        <name>m_pBinHeapRoot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="184" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1ac828cd9edf441136a39a7012c17a65e2" prot="private" static="no" mutable="no">
        <type><ref refid="d3/d89/HeapAllocator_8h_1a54d5660e65854f6ca2a47ac711c2fec5" kindref="member">BinHeapHeightChange</ref></type>
        <definition>BinHeapHeightChange m_iHeightChange</definition>
        <argsstring></argsstring>
        <name>m_iHeightChange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="185" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1a89aac3f366eb85db7b29c456098fd65a" prot="private" static="no" mutable="no">
        <type><ref refid="d9/dd0/Platform_8h_1a59e8652d68cb08192b3c64a744c061de" kindref="member">Byte</ref> *</type>
        <definition>Byte* m_pHeapMemory</definition>
        <argsstring></argsstring>
        <name>m_pHeapMemory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="188" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1ae790f6907d70c0f2ab54678596711df3" prot="private" static="no" mutable="no">
        <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>UInt m_iHeapSize</definition>
        <argsstring></argsstring>
        <name>m_iHeapSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="189" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/classHeapAllocator_1af42c5fa42fcaebcbd674e7bd83ce0aff" prot="private" static="no" mutable="no">
        <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>UInt m_iTotalFree</definition>
        <argsstring></argsstring>
        <name>m_iTotalFree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="190" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a1cf053e0d08055c042c33b3478f5c520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HeapAllocator</definition>
        <argsstring>(UInt iContextID, const GChar *strContextName, UInt iAllocatorID, const GChar *strAllocatorName)</argsstring>
        <name>HeapAllocator</name>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
          <declname>iContextID</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dd0/Platform_8h_1a178c928e74b49565d9ce41c8d9bb85f6" kindref="member">GChar</ref> *</type>
          <declname>strContextName</declname>
        </param>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
          <declname>iAllocatorID</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dd0/Platform_8h_1a178c928e74b49565d9ce41c8d9bb85f6" kindref="member">GChar</ref> *</type>
          <declname>strAllocatorName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="113"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a959e8644e40abf483a93fab2e597c20a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~HeapAllocator</definition>
        <argsstring>()</argsstring>
        <name>~HeapAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="114"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a9da8551f4a68f50154053055f52c2ba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1afdf0f22c576e6ee1b982f64b839c4bea" kindref="member">Void</ref></type>
        <definition>Void Initialize</definition>
        <argsstring>(UInt iHeapSize)</argsstring>
        <name>Initialize</name>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
          <declname>iHeapSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="117"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a9034990ea6331d36c0f19a4e8af78366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1afdf0f22c576e6ee1b982f64b839c4bea" kindref="member">Void</ref></type>
        <definition>Void Cleanup</definition>
        <argsstring>()</argsstring>
        <name>Cleanup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="118"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1ac0f1c763c7ae5fde3db72291619e9abe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="d2/d75/MemoryAllocator_8h_1a8c1de3b94793fa437260f531a032ef32" kindref="member">AllocatorType</ref></type>
        <definition>AllocatorType GetType</definition>
        <argsstring>() const </argsstring>
        <name>GetType</name>
        <reimplements refid="d0/de0/classMemoryAllocator_1aa898f3777d49b54133f6be825ce71458">GetType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="121"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a84cfa3bae08cc9b8449c10349456682f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>UInt GetBlockSize</definition>
        <argsstring>(Byte *pMemory) const </argsstring>
        <name>GetBlockSize</name>
        <reimplements refid="d0/de0/classMemoryAllocator_1a886ccf8df5290f43505beef069832964">GetBlockSize</reimplements>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1a59e8652d68cb08192b3c64a744c061de" kindref="member">Byte</ref> *</type>
          <declname>pMemory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="122"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a0fa11730017188b530a886464cf78325" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/dd0/Platform_8h_1a59e8652d68cb08192b3c64a744c061de" kindref="member">Byte</ref> *</type>
        <definition>Byte* Allocate</definition>
        <argsstring>(UInt iSize)</argsstring>
        <name>Allocate</name>
        <reimplements refid="d0/de0/classMemoryAllocator_1a2a31b6b73e37acbc1b1df8db2fe6c07b">Allocate</reimplements>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
          <declname>iSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="125"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a9a23ba98c3d5619cd67c1a0f850c4afa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/dd0/Platform_8h_1afdf0f22c576e6ee1b982f64b839c4bea" kindref="member">Void</ref></type>
        <definition>Void Free</definition>
        <argsstring>(Byte *pMemory)</argsstring>
        <name>Free</name>
        <reimplements refid="d0/de0/classMemoryAllocator_1afc49be48dd4c19d74dac0b2e1f776340">Free</reimplements>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1a59e8652d68cb08192b3c64a744c061de" kindref="member">Byte</ref> *</type>
          <declname>pMemory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="126"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a8a600139a1bfe4d516eaaec2139c6ecc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/dd0/Platform_8h_1afdf0f22c576e6ee1b982f64b839c4bea" kindref="member">Void</ref></type>
        <definition>Void GenerateReport</definition>
        <argsstring>(AllocatorReport *outReport) const </argsstring>
        <name>GenerateReport</name>
        <reimplements refid="d0/de0/classMemoryAllocator_1ab1fa7e6d5d502b79f9596b13a96f9458">GenerateReport</reimplements>
        <param>
          <type><ref refid="d9/d02/structAllocatorReport" kindref="compound">AllocatorReport</ref> *</type>
          <declname>outReport</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="129"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a31095b1ee639d8a3a398ced3231f348a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/dd0/Platform_8h_1afdf0f22c576e6ee1b982f64b839c4bea" kindref="member">Void</ref></type>
        <definition>Void LogReport</definition>
        <argsstring>(const AllocatorReport *pReport) const </argsstring>
        <name>LogReport</name>
        <reimplements refid="d0/de0/classMemoryAllocator_1a9b1b8eca0d487fa8e949c06c09c069ef">LogReport</reimplements>
        <param>
          <type>const <ref refid="d9/d02/structAllocatorReport" kindref="compound">AllocatorReport</ref> *</type>
          <declname>pReport</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="130"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1aa63031acd1be20ddc3d680bdceb1f2de" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>UInt _AU_ConvertSize</definition>
        <argsstring>(UInt iSize) const </argsstring>
        <name>_AU_ConvertSize</name>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
          <declname>iSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="146"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a8475bd9db4088780ae404950ea248a3a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1af6a258d8f3ee5206d682d799316314b1" kindref="member">Bool</ref></type>
        <definition>Bool _AU_IsAllocated</definition>
        <argsstring>(UInt iAUSize) const </argsstring>
        <name>_AU_IsAllocated</name>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
          <declname>iAUSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="147"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a4c65640c5b20cee2c8775e8f21dee591" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1af6a258d8f3ee5206d682d799316314b1" kindref="member">Bool</ref></type>
        <definition>Bool _AU_IsFree</definition>
        <argsstring>(UInt iAUSize) const </argsstring>
        <name>_AU_IsFree</name>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
          <declname>iAUSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="148"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a02a1fdd0cd087afe872ff721488544cc" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>UInt _AU_Size</definition>
        <argsstring>(UInt iAUSize) const </argsstring>
        <name>_AU_Size</name>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
          <declname>iAUSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="149"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1ada91bd04186fbc863c36f4cc1e0a186e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1a59e8652d68cb08192b3c64a744c061de" kindref="member">Byte</ref> *</type>
        <definition>Byte* _AU_Next</definition>
        <argsstring>(Byte *pChunk, UInt nAAU) const </argsstring>
        <name>_AU_Next</name>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1a59e8652d68cb08192b3c64a744c061de" kindref="member">Byte</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
          <declname>nAAU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="150"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a5c019db88c39551dc8291d56fd54ba2d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1a59e8652d68cb08192b3c64a744c061de" kindref="member">Byte</ref> *</type>
        <definition>Byte* _AU_Prev</definition>
        <argsstring>(Byte *pChunk, UInt nAAU) const </argsstring>
        <name>_AU_Prev</name>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1a59e8652d68cb08192b3c64a744c061de" kindref="member">Byte</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
          <declname>nAAU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="151"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1ad49d95e81edb7cc57b2163bc65007eb8" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1afdf0f22c576e6ee1b982f64b839c4bea" kindref="member">Void</ref></type>
        <definition>Void _Chunk_MarkAllocated</definition>
        <argsstring>(ChunkHead *pChunk) const </argsstring>
        <name>_Chunk_MarkAllocated</name>
        <param>
          <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="154"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1adfb5d2fd8fbea8fdb71c7d282c16e1eb" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1afdf0f22c576e6ee1b982f64b839c4bea" kindref="member">Void</ref></type>
        <definition>Void _Chunk_MarkFree</definition>
        <argsstring>(ChunkHead *pChunk) const </argsstring>
        <name>_Chunk_MarkFree</name>
        <param>
          <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="155"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a2982af600d6b33f7faca2639a4814402" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1af6a258d8f3ee5206d682d799316314b1" kindref="member">Bool</ref></type>
        <definition>Bool _Chunk_IsAllocated</definition>
        <argsstring>(const ChunkHead *pChunk) const </argsstring>
        <name>_Chunk_IsAllocated</name>
        <param>
          <type>const <ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="156"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a28ed5a6c3909bb892912625512983e8b" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1af6a258d8f3ee5206d682d799316314b1" kindref="member">Bool</ref></type>
        <definition>Bool _Chunk_IsFree</definition>
        <argsstring>(const ChunkHead *pChunk) const </argsstring>
        <name>_Chunk_IsFree</name>
        <param>
          <type>const <ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="157"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a38d442a3d7857357284c6e3e9878dc80" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>UInt _Chunk_PrevSize</definition>
        <argsstring>(const ChunkHead *pChunk) const </argsstring>
        <name>_Chunk_PrevSize</name>
        <param>
          <type>const <ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="158"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a2e50bdbf80c2bae30812e367ea887965" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
        <definition>UInt _Chunk_Size</definition>
        <argsstring>(const ChunkHead *pChunk) const </argsstring>
        <name>_Chunk_Size</name>
        <param>
          <type>const <ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="159"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1ac468eb529791a97acba2738439e436e1" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/d0e/structChunkHeapNode" kindref="compound">ChunkHeapNode</ref> *</type>
        <definition>ChunkHeapNode* _Chunk_GetHeapNode</definition>
        <argsstring>(ChunkHead *pChunk) const </argsstring>
        <name>_Chunk_GetHeapNode</name>
        <param>
          <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="160"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1ad062e5114f75b80d56ce9b2d7491f16d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/dc5/structChunkListNode" kindref="compound">ChunkListNode</ref> *</type>
        <definition>ChunkListNode* _Chunk_GetListNode</definition>
        <argsstring>(ChunkHead *pChunk) const </argsstring>
        <name>_Chunk_GetListNode</name>
        <param>
          <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="161"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a292f858eb9728e42d6f73f9e4d495156" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
        <definition>ChunkHead* _Chunk_GetHead</definition>
        <argsstring>(ChunkHeapNode *pHeapNode) const </argsstring>
        <name>_Chunk_GetHead</name>
        <param>
          <type><ref refid="d6/d0e/structChunkHeapNode" kindref="compound">ChunkHeapNode</ref> *</type>
          <declname>pHeapNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="162"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a8df92f08152a4fb52da6d53eaf9dac1d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
        <definition>ChunkHead* _Chunk_GetHead</definition>
        <argsstring>(ChunkListNode *pListNode) const </argsstring>
        <name>_Chunk_GetHead</name>
        <param>
          <type><ref refid="d6/dc5/structChunkListNode" kindref="compound">ChunkListNode</ref> *</type>
          <declname>pListNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="163"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1ae7ab1c01fb350043f49ee857f90b55c6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1a7cc214a236ad3bb6ad435bdcf5262a3f" kindref="member">Int</ref></type>
        <definition>Int _Compare</definition>
        <argsstring>(const ChunkHead *pLHS, const ChunkHead *pRHS) const </argsstring>
        <name>_Compare</name>
        <param>
          <type>const <ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pLHS</declname>
        </param>
        <param>
          <type>const <ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pRHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="164"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a3847469d60a9bad452b2e4f17c3be6db" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
        <definition>ChunkHead* _BinHeap_RequestChunk</definition>
        <argsstring>(UInt iMinSize)</argsstring>
        <name>_BinHeap_RequestChunk</name>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
          <declname>iMinSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="167"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a1b56807c527df5618be6186fe72c6d1f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1afdf0f22c576e6ee1b982f64b839c4bea" kindref="member">Void</ref></type>
        <definition>Void _BinHeap_ReleaseChunk</definition>
        <argsstring>(ChunkHead *pChunk)</argsstring>
        <name>_BinHeap_ReleaseChunk</name>
        <param>
          <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="168"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a02973a8143f3fa73a5c4bffd1f835cb5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
        <definition>ChunkHead* _PerformCoalescing</definition>
        <argsstring>(ChunkHead *pChunk)</argsstring>
        <name>_PerformCoalescing</name>
        <param>
          <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="171"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a605c27f85cf4660b159e7abaf8a92303" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d89/HeapAllocator_8h_1a54d5660e65854f6ca2a47ac711c2fec5" kindref="member">BinHeapHeightChange</ref></type>
        <definition>BinHeapHeightChange _RotateOnce</definition>
        <argsstring>(ChunkHeapNode **ppNode, BinHeapChild rotDir)</argsstring>
        <name>_RotateOnce</name>
        <param>
          <type><ref refid="d6/d0e/structChunkHeapNode" kindref="compound">ChunkHeapNode</ref> **</type>
          <declname>ppNode</declname>
        </param>
        <param>
          <type><ref refid="d3/d89/HeapAllocator_8h_1a487c7d96d1d2b77321ee923bf97b3b24" kindref="member">BinHeapChild</ref></type>
          <declname>rotDir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="175"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a9f8062ee0c159aff84d68c558803be84" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d89/HeapAllocator_8h_1a54d5660e65854f6ca2a47ac711c2fec5" kindref="member">BinHeapHeightChange</ref></type>
        <definition>BinHeapHeightChange _RotateTwice</definition>
        <argsstring>(ChunkHeapNode **ppNode, BinHeapChild rotDir)</argsstring>
        <name>_RotateTwice</name>
        <param>
          <type><ref refid="d6/d0e/structChunkHeapNode" kindref="compound">ChunkHeapNode</ref> **</type>
          <declname>ppNode</declname>
        </param>
        <param>
          <type><ref refid="d3/d89/HeapAllocator_8h_1a487c7d96d1d2b77321ee923bf97b3b24" kindref="member">BinHeapChild</ref></type>
          <declname>rotDir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="176"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a439837f60f896a130b355ba73b0616be" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d89/HeapAllocator_8h_1a54d5660e65854f6ca2a47ac711c2fec5" kindref="member">BinHeapHeightChange</ref></type>
        <definition>BinHeapHeightChange _ReBalance</definition>
        <argsstring>(ChunkHeapNode **ppNode)</argsstring>
        <name>_ReBalance</name>
        <param>
          <type><ref refid="d6/d0e/structChunkHeapNode" kindref="compound">ChunkHeapNode</ref> **</type>
          <declname>ppNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="177"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1aa96bf14a61e02a041452ff0cbdfffa6c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d0e/structChunkHeapNode" kindref="compound">ChunkHeapNode</ref> *</type>
        <definition>ChunkHeapNode* _rec_Insert</definition>
        <argsstring>(ChunkHeapNode **ppNode, BinHeapHeightChange &amp;heightChange, ChunkHead *pChunk)</argsstring>
        <name>_rec_Insert</name>
        <param>
          <type><ref refid="d6/d0e/structChunkHeapNode" kindref="compound">ChunkHeapNode</ref> **</type>
          <declname>ppNode</declname>
        </param>
        <param>
          <type><ref refid="d3/d89/HeapAllocator_8h_1a54d5660e65854f6ca2a47ac711c2fec5" kindref="member">BinHeapHeightChange</ref> &amp;</type>
          <declname>heightChange</declname>
        </param>
        <param>
          <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="178"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a2451d8a9709d30d489cbd026fa633436" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/dd0/Platform_8h_1af6a258d8f3ee5206d682d799316314b1" kindref="member">Bool</ref></type>
        <definition>Bool _rec_Remove</definition>
        <argsstring>(ChunkHeapNode **ppNode, BinHeapHeightChange &amp;heightChange, ChunkHead *pChunk)</argsstring>
        <name>_rec_Remove</name>
        <param>
          <type><ref refid="d6/d0e/structChunkHeapNode" kindref="compound">ChunkHeapNode</ref> **</type>
          <declname>ppNode</declname>
        </param>
        <param>
          <type><ref refid="d3/d89/HeapAllocator_8h_1a54d5660e65854f6ca2a47ac711c2fec5" kindref="member">BinHeapHeightChange</ref> &amp;</type>
          <declname>heightChange</declname>
        </param>
        <param>
          <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="179"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a70283d9081f74260bb4f1a6f462bd380" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d0e/structChunkHeapNode" kindref="compound">ChunkHeapNode</ref> *</type>
        <definition>ChunkHeapNode* _Search</definition>
        <argsstring>(UInt iMinSize) const </argsstring>
        <name>_Search</name>
        <param>
          <type><ref refid="d9/dd0/Platform_8h_1aba0996d26f7be2572973245b51852757" kindref="member">UInt</ref></type>
          <declname>iMinSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="180"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a26ad668efe55b5254e10a78c4a189239" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d0e/structChunkHeapNode" kindref="compound">ChunkHeapNode</ref> *</type>
        <definition>ChunkHeapNode* _Match</definition>
        <argsstring>(const ChunkHead *pChunk) const </argsstring>
        <name>_Match</name>
        <param>
          <type>const <ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="181"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/classHeapAllocator_1a16e0083f6ad11f1a73d59b6e8e0a5acb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
        <definition>ChunkHead* _Replace</definition>
        <argsstring>(ChunkHead *pNewChunk)</argsstring>
        <name>_Replace</name>
        <param>
          <type><ref refid="d4/dc2/structChunkHead" kindref="compound">ChunkHead</ref> *</type>
          <declname>pNewChunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="182"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4795">
        <label>MemoryAllocator</label>
        <link refid="d0/de0/classMemoryAllocator"/>
      </node>
      <node id="4794">
        <label>HeapAllocator</label>
        <link refid="dc/d98/classHeapAllocator"/>
        <childnode refid="4795" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4802">
        <label>struct _chunk_heapnode *</label>
      </node>
      <node id="4805">
        <label>ChunkHead</label>
        <link refid="d4/dc2/structChunkHead"/>
        <childnode refid="4799" relation="usage">
          <edgelabel>prevAUSize</edgelabel>
          <edgelabel>thisAUSize</edgelabel>
        </childnode>
      </node>
      <node id="4804">
        <label>BinHeapHeightChange</label>
      </node>
      <node id="4801">
        <label>struct _chunk_listnode *</label>
      </node>
      <node id="4806">
        <label>unsigned int</label>
      </node>
      <node id="4803">
        <label>unsigned char</label>
      </node>
      <node id="4799">
        <label>int</label>
      </node>
      <node id="4797">
        <label>MemoryAllocator</label>
        <link refid="d0/de0/classMemoryAllocator"/>
        <childnode refid="4798" relation="usage">
          <edgelabel>m_strContextName</edgelabel>
          <edgelabel>m_strAllocatorName</edgelabel>
        </childnode>
        <childnode refid="4799" relation="usage">
          <edgelabel>m_idAllocator</edgelabel>
          <edgelabel>m_idContext</edgelabel>
        </childnode>
      </node>
      <node id="4800">
        <label>ChunkHeapNode</label>
        <link refid="d6/d0e/structChunkHeapNode"/>
        <childnode refid="4799" relation="usage">
          <edgelabel>iBalanceFactor</edgelabel>
        </childnode>
        <childnode refid="4801" relation="usage">
          <edgelabel>pNext</edgelabel>
        </childnode>
        <childnode refid="4802" relation="usage">
          <edgelabel>pChild</edgelabel>
        </childnode>
      </node>
      <node id="4798">
        <label>char</label>
      </node>
      <node id="4796">
        <label>HeapAllocator</label>
        <link refid="dc/d98/classHeapAllocator"/>
        <childnode refid="4797" relation="public-inheritance">
        </childnode>
        <childnode refid="4800" relation="usage">
          <edgelabel>m_pBinHeapRoot</edgelabel>
        </childnode>
        <childnode refid="4803" relation="usage">
          <edgelabel>m_pHeapMemory</edgelabel>
        </childnode>
        <childnode refid="4804" relation="usage">
          <edgelabel>m_iHeightChange</edgelabel>
        </childnode>
        <childnode refid="4799" relation="usage">
          <edgelabel>m_iTotalFree</edgelabel>
          <edgelabel>m_iHeapSize</edgelabel>
        </childnode>
        <childnode refid="4805" relation="usage">
          <edgelabel>m_pLastFreed</edgelabel>
        </childnode>
        <childnode refid="4806" relation="usage">
          <edgelabel>MinimalChunkAUSize</edgelabel>
          <edgelabel>DummyChunkByteSize</edgelabel>
          <edgelabel>ChunkHeapNodeAUSize</edgelabel>
          <edgelabel>ChunkHeadAUSize</edgelabel>
          <edgelabel>AUSizeMask</edgelabel>
          <edgelabel>AlignUnit</edgelabel>
          <edgelabel>DummyChunkAUSize</edgelabel>
          <edgelabel>AlignUnitShift</edgelabel>
          <edgelabel>AUFreeMask</edgelabel>
          <edgelabel>ChunkListNodeAUSize</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" line="110" bodyfile="D:/Programming/_Projects/Scarab Engine/Source/Lib/Memory/Allocators/HeapAllocator.h" bodystart="109" bodyend="191"/>
    <listofallmembers>
      <member refid="dc/d98/classHeapAllocator_1aa63031acd1be20ddc3d680bdceb1f2de" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_AU_ConvertSize</name></member>
      <member refid="dc/d98/classHeapAllocator_1a8475bd9db4088780ae404950ea248a3a" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_AU_IsAllocated</name></member>
      <member refid="dc/d98/classHeapAllocator_1a4c65640c5b20cee2c8775e8f21dee591" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_AU_IsFree</name></member>
      <member refid="dc/d98/classHeapAllocator_1ada91bd04186fbc863c36f4cc1e0a186e" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_AU_Next</name></member>
      <member refid="dc/d98/classHeapAllocator_1a5c019db88c39551dc8291d56fd54ba2d" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_AU_Prev</name></member>
      <member refid="dc/d98/classHeapAllocator_1a02a1fdd0cd087afe872ff721488544cc" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_AU_Size</name></member>
      <member refid="dc/d98/classHeapAllocator_1a1b56807c527df5618be6186fe72c6d1f" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_BinHeap_ReleaseChunk</name></member>
      <member refid="dc/d98/classHeapAllocator_1a3847469d60a9bad452b2e4f17c3be6db" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_BinHeap_RequestChunk</name></member>
      <member refid="dc/d98/classHeapAllocator_1a292f858eb9728e42d6f73f9e4d495156" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Chunk_GetHead</name></member>
      <member refid="dc/d98/classHeapAllocator_1a8df92f08152a4fb52da6d53eaf9dac1d" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Chunk_GetHead</name></member>
      <member refid="dc/d98/classHeapAllocator_1ac468eb529791a97acba2738439e436e1" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Chunk_GetHeapNode</name></member>
      <member refid="dc/d98/classHeapAllocator_1ad062e5114f75b80d56ce9b2d7491f16d" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Chunk_GetListNode</name></member>
      <member refid="dc/d98/classHeapAllocator_1a2982af600d6b33f7faca2639a4814402" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Chunk_IsAllocated</name></member>
      <member refid="dc/d98/classHeapAllocator_1a28ed5a6c3909bb892912625512983e8b" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Chunk_IsFree</name></member>
      <member refid="dc/d98/classHeapAllocator_1ad49d95e81edb7cc57b2163bc65007eb8" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Chunk_MarkAllocated</name></member>
      <member refid="dc/d98/classHeapAllocator_1adfb5d2fd8fbea8fdb71c7d282c16e1eb" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Chunk_MarkFree</name></member>
      <member refid="dc/d98/classHeapAllocator_1a38d442a3d7857357284c6e3e9878dc80" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Chunk_PrevSize</name></member>
      <member refid="dc/d98/classHeapAllocator_1a2e50bdbf80c2bae30812e367ea887965" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Chunk_Size</name></member>
      <member refid="dc/d98/classHeapAllocator_1ae7ab1c01fb350043f49ee857f90b55c6" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Compare</name></member>
      <member refid="dc/d98/classHeapAllocator_1a26ad668efe55b5254e10a78c4a189239" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Match</name></member>
      <member refid="dc/d98/classHeapAllocator_1a02973a8143f3fa73a5c4bffd1f835cb5" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_PerformCoalescing</name></member>
      <member refid="dc/d98/classHeapAllocator_1a439837f60f896a130b355ba73b0616be" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_ReBalance</name></member>
      <member refid="dc/d98/classHeapAllocator_1aa96bf14a61e02a041452ff0cbdfffa6c" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_rec_Insert</name></member>
      <member refid="dc/d98/classHeapAllocator_1a2451d8a9709d30d489cbd026fa633436" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_rec_Remove</name></member>
      <member refid="dc/d98/classHeapAllocator_1a16e0083f6ad11f1a73d59b6e8e0a5acb" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Replace</name></member>
      <member refid="dc/d98/classHeapAllocator_1a605c27f85cf4660b159e7abaf8a92303" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_RotateOnce</name></member>
      <member refid="dc/d98/classHeapAllocator_1a9f8062ee0c159aff84d68c558803be84" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_RotateTwice</name></member>
      <member refid="dc/d98/classHeapAllocator_1a70283d9081f74260bb4f1a6f462bd380" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>_Search</name></member>
      <member refid="dc/d98/classHeapAllocator_1aca99064a1b5d4f94dc2ee13471fa23fd" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>AlignUnit</name></member>
      <member refid="dc/d98/classHeapAllocator_1a5c10248f3f7d9fa562df67b4f64fb874" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>AlignUnitShift</name></member>
      <member refid="dc/d98/classHeapAllocator_1a0fa11730017188b530a886464cf78325" prot="public" virt="virtual"><scope>HeapAllocator</scope><name>Allocate</name></member>
      <member refid="dc/d98/classHeapAllocator_1ae9b7af9168de7eeb81ece58754f3c029" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>AUFreeMask</name></member>
      <member refid="dc/d98/classHeapAllocator_1aef8b996e0b6ec8c35ffe4358d0f0d9ef" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>AUSizeMask</name></member>
      <member refid="dc/d98/classHeapAllocator_1ad87f66611d54e90676fcedca61ccc92d" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>ChunkHeadAUSize</name></member>
      <member refid="dc/d98/classHeapAllocator_1a961987d20bb79c3ea47162aa92da15c1" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>ChunkHeapNodeAUSize</name></member>
      <member refid="dc/d98/classHeapAllocator_1aa308d624fcb8588580b5406d732ec936" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>ChunkListNodeAUSize</name></member>
      <member refid="dc/d98/classHeapAllocator_1a9034990ea6331d36c0f19a4e8af78366" prot="public" virt="non-virtual"><scope>HeapAllocator</scope><name>Cleanup</name></member>
      <member refid="dc/d98/classHeapAllocator_1a4b16f0409abc2f7beaa5d2e1881fcb44" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>DummyChunkAUSize</name></member>
      <member refid="dc/d98/classHeapAllocator_1afb4f0699a7629636dab4b0c4f1b99556" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>DummyChunkByteSize</name></member>
      <member refid="dc/d98/classHeapAllocator_1a9a23ba98c3d5619cd67c1a0f850c4afa" prot="public" virt="virtual"><scope>HeapAllocator</scope><name>Free</name></member>
      <member refid="dc/d98/classHeapAllocator_1a8a600139a1bfe4d516eaaec2139c6ecc" prot="public" virt="virtual"><scope>HeapAllocator</scope><name>GenerateReport</name></member>
      <member refid="d0/de0/classMemoryAllocator_1a72c3ca31f668ffb597b92e1e47c19b96" prot="public" virt="non-virtual"><scope>HeapAllocator</scope><name>GetAllocatorID</name></member>
      <member refid="d0/de0/classMemoryAllocator_1a17b30098af9a03e19cbe092885cd2b85" prot="public" virt="non-virtual"><scope>HeapAllocator</scope><name>GetAllocatorName</name></member>
      <member refid="dc/d98/classHeapAllocator_1a84cfa3bae08cc9b8449c10349456682f" prot="public" virt="virtual"><scope>HeapAllocator</scope><name>GetBlockSize</name></member>
      <member refid="d0/de0/classMemoryAllocator_1a21d6aed8c4cc7efdd2676a2434c816a1" prot="public" virt="non-virtual"><scope>HeapAllocator</scope><name>GetContextID</name></member>
      <member refid="d0/de0/classMemoryAllocator_1a59b82e46c834e0eb2fd84eecbb9c4206" prot="public" virt="non-virtual"><scope>HeapAllocator</scope><name>GetContextName</name></member>
      <member refid="dc/d98/classHeapAllocator_1ac0f1c763c7ae5fde3db72291619e9abe" prot="public" virt="virtual"><scope>HeapAllocator</scope><name>GetType</name></member>
      <member refid="dc/d98/classHeapAllocator_1a1cf053e0d08055c042c33b3478f5c520" prot="public" virt="non-virtual"><scope>HeapAllocator</scope><name>HeapAllocator</name></member>
      <member refid="dc/d98/classHeapAllocator_1a9da8551f4a68f50154053055f52c2ba5" prot="public" virt="non-virtual"><scope>HeapAllocator</scope><name>Initialize</name></member>
      <member refid="dc/d98/classHeapAllocator_1a31095b1ee639d8a3a398ced3231f348a" prot="public" virt="virtual"><scope>HeapAllocator</scope><name>LogReport</name></member>
      <member refid="d0/de0/classMemoryAllocator_1a56dee949e5f1271dbff9056eef635add" prot="protected" virt="non-virtual"><scope>HeapAllocator</scope><name>m_idAllocator</name></member>
      <member refid="d0/de0/classMemoryAllocator_1a87ea78b2e3fd0afd4d06401ad0fbb24f" prot="protected" virt="non-virtual"><scope>HeapAllocator</scope><name>m_idContext</name></member>
      <member refid="dc/d98/classHeapAllocator_1ae790f6907d70c0f2ab54678596711df3" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>m_iHeapSize</name></member>
      <member refid="dc/d98/classHeapAllocator_1ac828cd9edf441136a39a7012c17a65e2" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>m_iHeightChange</name></member>
      <member refid="dc/d98/classHeapAllocator_1af42c5fa42fcaebcbd674e7bd83ce0aff" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>m_iTotalFree</name></member>
      <member refid="dc/d98/classHeapAllocator_1a74756c8e14d5874a227661263a082a0e" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>m_pBinHeapRoot</name></member>
      <member refid="dc/d98/classHeapAllocator_1a89aac3f366eb85db7b29c456098fd65a" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>m_pHeapMemory</name></member>
      <member refid="dc/d98/classHeapAllocator_1a6e836e02e8227cc451a305253d12a42b" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>m_pLastFreed</name></member>
      <member refid="d0/de0/classMemoryAllocator_1a4b8f5bbd3ee6e1e306411c11ae9df545" prot="protected" virt="non-virtual"><scope>HeapAllocator</scope><name>m_strAllocatorName</name></member>
      <member refid="d0/de0/classMemoryAllocator_1aa8a29a254562924314a9f60eeb44ac21" prot="protected" virt="non-virtual"><scope>HeapAllocator</scope><name>m_strContextName</name></member>
      <member refid="d0/de0/classMemoryAllocator_1ac8c9cbd1486e53440b3d23b91615a485" prot="public" virt="non-virtual"><scope>HeapAllocator</scope><name>MemoryAllocator</name></member>
      <member refid="dc/d98/classHeapAllocator_1af2939b38be44a3a6b02455b4a06e939c" prot="private" virt="non-virtual"><scope>HeapAllocator</scope><name>MinimalChunkAUSize</name></member>
      <member refid="dc/d98/classHeapAllocator_1a959e8644e40abf483a93fab2e597c20a" prot="public" virt="non-virtual"><scope>HeapAllocator</scope><name>~HeapAllocator</name></member>
      <member refid="d0/de0/classMemoryAllocator_1adbe8d631e8845e26240ca27ab5827449" prot="public" virt="non-virtual"><scope>HeapAllocator</scope><name>~MemoryAllocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
